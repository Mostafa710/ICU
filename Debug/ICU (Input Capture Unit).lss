
ICU (Input Capture Unit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000cea  00000d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bcc  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000583  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00002ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb5  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031c  00000000  00000000  00003cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d9  00000000  00000000  00003fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000047ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b0  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006eb  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 02 	call	0x598	; 0x598 <main>
  8a:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_setPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_setPINDir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_setPINDir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_setPINDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_setPINDir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_setPINDir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_setPINDir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_setPINDir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_setPINDir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_setPINDir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_setPINDir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_setPINDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_setPINDir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_setPINDir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_setPINDir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_setPINDir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_setPINDir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_setPINDir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_setPINDir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_setPINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_setPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_setPINDir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_setPINDir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPINDir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPINDir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_setPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPINDir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPINDir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
				CLR_BIT(DDRB,pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_setPINDir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_setPINDir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_setPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPINDir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPINDir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_setPINDir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_setPINDir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_setPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPINDir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPINDir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_setPINDir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_setPINDir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_writePIN>:
		break;
	}
}
void DIO_writePIN(unsigned char portname,unsigned char pinnumber,unsigned char val)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_writePIN+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_writePIN+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_writePIN+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_writePIN+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_writePIN+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_writePIN+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_writePIN+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_writePIN+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_writePIN+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_writePIN+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_writePIN+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_writePIN+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_writePIN+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_writePIN+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_writePIN+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_writePIN+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_writePIN+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_writePIN+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_writePIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_writePIN+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_writePIN+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_writePIN+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_writePIN+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_writePIN+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_writePIN+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_writePIN+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_writePIN+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_writePIN+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_writePIN+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_writePIN+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_writePIN+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_writePIN+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_writePIN+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_writePIN+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_writePIN+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_writePIN+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_writePIN+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_writePIN+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_writePIN+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_togglePIN>:
		break;
	}
}
void DIO_togglePIN(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_togglePIN+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_togglePIN+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_togglePIN+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_togglePIN+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_togglePIN+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_togglePIN+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_togglePIN+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_togglePIN+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_togglePIN+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_togglePIN+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_togglePIN+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_togglePIN+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_togglePIN+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_togglePIN+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_togglePIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_togglePIN+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_togglePIN+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_togglePIN+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_togglePIN+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
		break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_togglePIN+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_togglePIN+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_togglePIN+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_togglePIN+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_readPIN>:
	}
}
unsigned char DIO_readPIN(unsigned char portname,unsigned char pinnumber)
{
	unsigned char val;
	switch(portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	b1 f1       	breq	.+108    	; 0x3e0 <DIO_readPIN+0x70>
 374:	85 34       	cpi	r24, 0x45	; 69
 376:	38 f4       	brcc	.+14     	; 0x386 <DIO_readPIN+0x16>
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	e1 f0       	breq	.+56     	; 0x3b4 <DIO_readPIN+0x44>
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	28 f5       	brcc	.+74     	; 0x3ca <DIO_readPIN+0x5a>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	c1 f5       	brne	.+112    	; 0x3f4 <DIO_readPIN+0x84>
 384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_readPIN+0x2e>
 386:	82 36       	cpi	r24, 0x62	; 98
 388:	a9 f0       	breq	.+42     	; 0x3b4 <DIO_readPIN+0x44>
 38a:	83 36       	cpi	r24, 0x63	; 99
 38c:	18 f4       	brcc	.+6      	; 0x394 <DIO_readPIN+0x24>
 38e:	81 36       	cpi	r24, 0x61	; 97
 390:	89 f5       	brne	.+98     	; 0x3f4 <DIO_readPIN+0x84>
 392:	05 c0       	rjmp	.+10     	; 0x39e <DIO_readPIN+0x2e>
 394:	83 36       	cpi	r24, 0x63	; 99
 396:	c9 f0       	breq	.+50     	; 0x3ca <DIO_readPIN+0x5a>
 398:	84 36       	cpi	r24, 0x64	; 100
 39a:	61 f5       	brne	.+88     	; 0x3f4 <DIO_readPIN+0x84>
 39c:	21 c0       	rjmp	.+66     	; 0x3e0 <DIO_readPIN+0x70>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pinnumber);
 39e:	29 b3       	in	r18, 0x19	; 25
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	c9 01       	movw	r24, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_readPIN+0x3a>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_readPIN+0x36>
 3ae:	98 2f       	mov	r25, r24
 3b0:	91 70       	andi	r25, 0x01	; 1
		break;
 3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <DIO_readPIN+0x84>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pinnumber);
 3b4:	26 b3       	in	r18, 0x16	; 22
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	c9 01       	movw	r24, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_readPIN+0x50>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_readPIN+0x4c>
 3c4:	98 2f       	mov	r25, r24
 3c6:	91 70       	andi	r25, 0x01	; 1
		break;
 3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <DIO_readPIN+0x84>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pinnumber);
 3ca:	23 b3       	in	r18, 0x13	; 19
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_readPIN+0x66>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_readPIN+0x62>
 3da:	98 2f       	mov	r25, r24
 3dc:	91 70       	andi	r25, 0x01	; 1
		break;
 3de:	0a c0       	rjmp	.+20     	; 0x3f4 <DIO_readPIN+0x84>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pinnumber);
 3e0:	20 b3       	in	r18, 0x10	; 16
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	c9 01       	movw	r24, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_readPIN+0x7c>
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_readPIN+0x78>
 3f0:	98 2f       	mov	r25, r24
 3f2:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return val;
}
 3f4:	89 2f       	mov	r24, r25
 3f6:	08 95       	ret

000003f8 <DIO_setPORTDir>:
void DIO_setPORTDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3f8:	84 34       	cpi	r24, 0x44	; 68
 3fa:	d9 f0       	breq	.+54     	; 0x432 <DIO_setPORTDir+0x3a>
 3fc:	85 34       	cpi	r24, 0x45	; 69
 3fe:	38 f4       	brcc	.+14     	; 0x40e <DIO_setPORTDir+0x16>
 400:	82 34       	cpi	r24, 0x42	; 66
 402:	99 f0       	breq	.+38     	; 0x42a <DIO_setPORTDir+0x32>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	98 f4       	brcc	.+38     	; 0x42e <DIO_setPORTDir+0x36>
 408:	81 34       	cpi	r24, 0x41	; 65
 40a:	a1 f4       	brne	.+40     	; 0x434 <DIO_setPORTDir+0x3c>
 40c:	0c c0       	rjmp	.+24     	; 0x426 <DIO_setPORTDir+0x2e>
 40e:	82 36       	cpi	r24, 0x62	; 98
 410:	61 f0       	breq	.+24     	; 0x42a <DIO_setPORTDir+0x32>
 412:	83 36       	cpi	r24, 0x63	; 99
 414:	18 f4       	brcc	.+6      	; 0x41c <DIO_setPORTDir+0x24>
 416:	81 36       	cpi	r24, 0x61	; 97
 418:	69 f4       	brne	.+26     	; 0x434 <DIO_setPORTDir+0x3c>
 41a:	05 c0       	rjmp	.+10     	; 0x426 <DIO_setPORTDir+0x2e>
 41c:	83 36       	cpi	r24, 0x63	; 99
 41e:	39 f0       	breq	.+14     	; 0x42e <DIO_setPORTDir+0x36>
 420:	84 36       	cpi	r24, 0x64	; 100
 422:	41 f4       	brne	.+16     	; 0x434 <DIO_setPORTDir+0x3c>
 424:	06 c0       	rjmp	.+12     	; 0x432 <DIO_setPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 426:	6a bb       	out	0x1a, r22	; 26
		break;
 428:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 42a:	67 bb       	out	0x17, r22	; 23
		break;
 42c:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 42e:	64 bb       	out	0x14, r22	; 20
		break;
 430:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 432:	61 bb       	out	0x11, r22	; 17
 434:	08 95       	ret

00000436 <DIO_writePORT>:
		break;
	}
}
void DIO_writePORT(unsigned char portname,unsigned char val)
{
	switch(portname)
 436:	84 34       	cpi	r24, 0x44	; 68
 438:	d9 f0       	breq	.+54     	; 0x470 <DIO_writePORT+0x3a>
 43a:	85 34       	cpi	r24, 0x45	; 69
 43c:	38 f4       	brcc	.+14     	; 0x44c <DIO_writePORT+0x16>
 43e:	82 34       	cpi	r24, 0x42	; 66
 440:	99 f0       	breq	.+38     	; 0x468 <DIO_writePORT+0x32>
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	98 f4       	brcc	.+38     	; 0x46c <DIO_writePORT+0x36>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	a1 f4       	brne	.+40     	; 0x472 <DIO_writePORT+0x3c>
 44a:	0c c0       	rjmp	.+24     	; 0x464 <DIO_writePORT+0x2e>
 44c:	82 36       	cpi	r24, 0x62	; 98
 44e:	61 f0       	breq	.+24     	; 0x468 <DIO_writePORT+0x32>
 450:	83 36       	cpi	r24, 0x63	; 99
 452:	18 f4       	brcc	.+6      	; 0x45a <DIO_writePORT+0x24>
 454:	81 36       	cpi	r24, 0x61	; 97
 456:	69 f4       	brne	.+26     	; 0x472 <DIO_writePORT+0x3c>
 458:	05 c0       	rjmp	.+10     	; 0x464 <DIO_writePORT+0x2e>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	39 f0       	breq	.+14     	; 0x46c <DIO_writePORT+0x36>
 45e:	84 36       	cpi	r24, 0x64	; 100
 460:	41 f4       	brne	.+16     	; 0x472 <DIO_writePORT+0x3c>
 462:	06 c0       	rjmp	.+12     	; 0x470 <DIO_writePORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 464:	6b bb       	out	0x1b, r22	; 27
		break;
 466:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 468:	68 bb       	out	0x18, r22	; 24
		break;
 46a:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 46c:	65 bb       	out	0x15, r22	; 21
		break;
 46e:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 470:	62 bb       	out	0x12, r22	; 18
 472:	08 95       	ret

00000474 <DIO_togglePORT>:
		break;
	}
}
void DIO_togglePORT(unsigned char portname)
{
	switch(portname)
 474:	84 34       	cpi	r24, 0x44	; 68
 476:	09 f1       	breq	.+66     	; 0x4ba <DIO_togglePORT+0x46>
 478:	85 34       	cpi	r24, 0x45	; 69
 47a:	38 f4       	brcc	.+14     	; 0x48a <DIO_togglePORT+0x16>
 47c:	82 34       	cpi	r24, 0x42	; 66
 47e:	a9 f0       	breq	.+42     	; 0x4aa <DIO_togglePORT+0x36>
 480:	83 34       	cpi	r24, 0x43	; 67
 482:	b8 f4       	brcc	.+46     	; 0x4b2 <DIO_togglePORT+0x3e>
 484:	81 34       	cpi	r24, 0x41	; 65
 486:	e1 f4       	brne	.+56     	; 0x4c0 <DIO_togglePORT+0x4c>
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <DIO_togglePORT+0x2e>
 48a:	82 36       	cpi	r24, 0x62	; 98
 48c:	71 f0       	breq	.+28     	; 0x4aa <DIO_togglePORT+0x36>
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	18 f4       	brcc	.+6      	; 0x498 <DIO_togglePORT+0x24>
 492:	81 36       	cpi	r24, 0x61	; 97
 494:	a9 f4       	brne	.+42     	; 0x4c0 <DIO_togglePORT+0x4c>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_togglePORT+0x2e>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	59 f0       	breq	.+22     	; 0x4b2 <DIO_togglePORT+0x3e>
 49c:	84 36       	cpi	r24, 0x64	; 100
 49e:	81 f4       	brne	.+32     	; 0x4c0 <DIO_togglePORT+0x4c>
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_togglePORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=(~PORTA);
 4a2:	8b b3       	in	r24, 0x1b	; 27
 4a4:	80 95       	com	r24
 4a6:	8b bb       	out	0x1b, r24	; 27
		break;
 4a8:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=(~PORTB);
 4aa:	88 b3       	in	r24, 0x18	; 24
 4ac:	80 95       	com	r24
 4ae:	88 bb       	out	0x18, r24	; 24
		break;
 4b0:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=(~PORTC);
 4b2:	85 b3       	in	r24, 0x15	; 21
 4b4:	80 95       	com	r24
 4b6:	85 bb       	out	0x15, r24	; 21
		break;
 4b8:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=(~PORTD);
 4ba:	82 b3       	in	r24, 0x12	; 18
 4bc:	80 95       	com	r24
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret

000004c2 <DIO_readPORT>:
	}
}
unsigned char DIO_readPORT(unsigned char portname)
{
	unsigned char val;
	switch(portname)
 4c2:	84 34       	cpi	r24, 0x44	; 68
 4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_readPORT+0x3a>
 4c6:	85 34       	cpi	r24, 0x45	; 69
 4c8:	38 f4       	brcc	.+14     	; 0x4d8 <DIO_readPORT+0x16>
 4ca:	82 34       	cpi	r24, 0x42	; 66
 4cc:	99 f0       	breq	.+38     	; 0x4f4 <DIO_readPORT+0x32>
 4ce:	83 34       	cpi	r24, 0x43	; 67
 4d0:	98 f4       	brcc	.+38     	; 0x4f8 <DIO_readPORT+0x36>
 4d2:	81 34       	cpi	r24, 0x41	; 65
 4d4:	a1 f4       	brne	.+40     	; 0x4fe <DIO_readPORT+0x3c>
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <DIO_readPORT+0x2e>
 4d8:	82 36       	cpi	r24, 0x62	; 98
 4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_readPORT+0x32>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	18 f4       	brcc	.+6      	; 0x4e6 <DIO_readPORT+0x24>
 4e0:	81 36       	cpi	r24, 0x61	; 97
 4e2:	69 f4       	brne	.+26     	; 0x4fe <DIO_readPORT+0x3c>
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <DIO_readPORT+0x2e>
 4e6:	83 36       	cpi	r24, 0x63	; 99
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <DIO_readPORT+0x36>
 4ea:	84 36       	cpi	r24, 0x64	; 100
 4ec:	41 f4       	brne	.+16     	; 0x4fe <DIO_readPORT+0x3c>
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <DIO_readPORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 4f0:	99 b3       	in	r25, 0x19	; 25
		break;
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <DIO_readPORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
 4f4:	96 b3       	in	r25, 0x16	; 22
		break;
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <DIO_readPORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
 4f8:	93 b3       	in	r25, 0x13	; 19
		break;
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <DIO_readPORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
 4fc:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 4fe:	89 2f       	mov	r24, r25
 500:	08 95       	ret

00000502 <DIO_pullupconnect>:
void DIO_pullupconnect(unsigned char portname,unsigned char pinnumber,unsigned char connect)
{
	DIO_writePIN(portname,pinnumber,connect);
 502:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
}
 506:	08 95       	ret

00000508 <DIO_write_low_nibble>:
void DIO_write_low_nibble(unsigned char portname,unsigned char val)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	c8 2f       	mov	r28, r24
 50e:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,0,READ_BIT(val,0));
 510:	46 2f       	mov	r20, r22
 512:	41 70       	andi	r20, 0x01	; 1
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,1,READ_BIT(val,1));
 51a:	4d 2f       	mov	r20, r29
 51c:	46 95       	lsr	r20
 51e:	41 70       	andi	r20, 0x01	; 1
 520:	8c 2f       	mov	r24, r28
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,2,READ_BIT(val,2));
 528:	4d 2f       	mov	r20, r29
 52a:	46 95       	lsr	r20
 52c:	46 95       	lsr	r20
 52e:	41 70       	andi	r20, 0x01	; 1
 530:	8c 2f       	mov	r24, r28
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,3,READ_BIT(val,3));
 538:	d6 95       	lsr	r29
 53a:	d6 95       	lsr	r29
 53c:	d6 95       	lsr	r29
 53e:	4d 2f       	mov	r20, r29
 540:	41 70       	andi	r20, 0x01	; 1
 542:	8c 2f       	mov	r24, r28
 544:	63 e0       	ldi	r22, 0x03	; 3
 546:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <DIO_write_high_nibble>:
void DIO_write_high_nibble(unsigned char portname,unsigned char val)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	c8 2f       	mov	r28, r24
 556:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,4,READ_BIT(val,0));
 558:	46 2f       	mov	r20, r22
 55a:	41 70       	andi	r20, 0x01	; 1
 55c:	64 e0       	ldi	r22, 0x04	; 4
 55e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,5,READ_BIT(val,1));
 562:	4d 2f       	mov	r20, r29
 564:	46 95       	lsr	r20
 566:	41 70       	andi	r20, 0x01	; 1
 568:	8c 2f       	mov	r24, r28
 56a:	65 e0       	ldi	r22, 0x05	; 5
 56c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,6,READ_BIT(val,2));
 570:	4d 2f       	mov	r20, r29
 572:	46 95       	lsr	r20
 574:	46 95       	lsr	r20
 576:	41 70       	andi	r20, 0x01	; 1
 578:	8c 2f       	mov	r24, r28
 57a:	66 e0       	ldi	r22, 0x06	; 6
 57c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,7,READ_BIT(val,3));
 580:	d6 95       	lsr	r29
 582:	d6 95       	lsr	r29
 584:	d6 95       	lsr	r29
 586:	4d 2f       	mov	r20, r29
 588:	41 70       	andi	r20, 0x01	; 1
 58a:	8c 2f       	mov	r24, r28
 58c:	67 e0       	ldi	r22, 0x07	; 7
 58e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <main>:
int main(void)
{
	unsigned short a,b,c;
	unsigned short high,period,frequency;
	unsigned char duty_cycle;
	LCD_init();
 598:	0e 94 43 04 	call	0x886	; 0x886 <LCD_init>
	TCCR1A=0;
 59c:	1f bc       	out	0x2f, r1	; 47
	
	/* Clear the flag bit (Important) */
	SET_BIT(TIFR,ICF1);
 59e:	88 b7       	in	r24, 0x38	; 56
 5a0:	80 62       	ori	r24, 0x20	; 32
 5a2:	88 bf       	out	0x38, r24	; 56
	
	/* Detect first rising edge */
	TCCR1B=0xC1;
 5a4:	81 ec       	ldi	r24, 0xC1	; 193
 5a6:	8e bd       	out	0x2e, r24	; 46
	while(READ_BIT(TIFR,ICF1) == 0);
 5a8:	88 b7       	in	r24, 0x38	; 56
 5aa:	85 ff       	sbrs	r24, 5
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <main+0x10>
	SET_BIT(TIFR,ICF1);
 5ae:	88 b7       	in	r24, 0x38	; 56
 5b0:	80 62       	ori	r24, 0x20	; 32
 5b2:	88 bf       	out	0x38, r24	; 56
	a=ICR1;
 5b4:	86 b5       	in	r24, 0x26	; 38
 5b6:	97 b5       	in	r25, 0x27	; 39
	
	/* Detect first falling edge */
	TCCR1B=0x81;
 5b8:	21 e8       	ldi	r18, 0x81	; 129
 5ba:	2e bd       	out	0x2e, r18	; 46
	while(READ_BIT(TIFR,ICF1) == 0);
 5bc:	28 b7       	in	r18, 0x38	; 56
 5be:	25 ff       	sbrs	r18, 5
 5c0:	fd cf       	rjmp	.-6      	; 0x5bc <main+0x24>
	SET_BIT(TIFR,ICF1);
 5c2:	28 b7       	in	r18, 0x38	; 56
 5c4:	20 62       	ori	r18, 0x20	; 32
 5c6:	28 bf       	out	0x38, r18	; 56
	b=ICR1;
 5c8:	26 b5       	in	r18, 0x26	; 38
 5ca:	37 b5       	in	r19, 0x27	; 39
	
	/* Detect second rising edge */
	TCCR1B=0xC1;
 5cc:	41 ec       	ldi	r20, 0xC1	; 193
 5ce:	4e bd       	out	0x2e, r20	; 46
	while(READ_BIT(TIFR,ICF1) == 0);
 5d0:	48 b7       	in	r20, 0x38	; 56
 5d2:	45 ff       	sbrs	r20, 5
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <main+0x38>
	SET_BIT(TIFR,ICF1);
 5d6:	48 b7       	in	r20, 0x38	; 56
 5d8:	40 62       	ori	r20, 0x20	; 32
 5da:	48 bf       	out	0x38, r20	; 56
	c=ICR1;
 5dc:	c6 b4       	in	r12, 0x26	; 38
 5de:	d7 b4       	in	r13, 0x27	; 39
	
	/* Stop the timer (Not Important) */
	TCCR1B=0;
 5e0:	1e bc       	out	0x2e, r1	; 46
	TCNT1=0;
 5e2:	1d bc       	out	0x2d, r1	; 45
 5e4:	1c bc       	out	0x2c, r1	; 44
	
	/* Check for timer 1 overflow */
	if(a<b && b<c)
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <main+0x56>
 5ec:	da c0       	rjmp	.+436    	; 0x7a2 <main+0x20a>
 5ee:	2c 15       	cp	r18, r12
 5f0:	3d 05       	cpc	r19, r13
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <main+0x5e>
 5f4:	d6 c0       	rjmp	.+428    	; 0x7a2 <main+0x20a>
	{
		high = b-a;
		period = c-a;
 5f6:	c8 1a       	sub	r12, r24
 5f8:	d9 0a       	sbc	r13, r25
	TCNT1=0;
	
	/* Check for timer 1 overflow */
	if(a<b && b<c)
	{
		high = b-a;
 5fa:	28 1b       	sub	r18, r24
 5fc:	39 0b       	sbc	r19, r25
		period = c-a;
		duty_cycle = ((float)high/period)*100;
 5fe:	b9 01       	movw	r22, r18
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatunsisf>
 608:	4b 01       	movw	r8, r22
 60a:	5c 01       	movw	r10, r24
 60c:	ee 24       	eor	r14, r14
 60e:	ff 24       	eor	r15, r15
 610:	c7 01       	movw	r24, r14
 612:	b6 01       	movw	r22, r12
 614:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatunsisf>
 618:	9b 01       	movw	r18, r22
 61a:	ac 01       	movw	r20, r24
 61c:	c5 01       	movw	r24, r10
 61e:	b4 01       	movw	r22, r8
 620:	0e 94 ac 04 	call	0x958	; 0x958 <__divsf3>
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	48 ec       	ldi	r20, 0xC8	; 200
 62a:	52 e4       	ldi	r21, 0x42	; 66
 62c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3>
 630:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
 634:	86 2e       	mov	r8, r22
		frequency = F_CPU/period;
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	72 e1       	ldi	r23, 0x12	; 18
 63a:	8a e7       	ldi	r24, 0x7A	; 122
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a7 01       	movw	r20, r14
 640:	96 01       	movw	r18, r12
 642:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 646:	e9 01       	movw	r28, r18
		LCD_send_string("Duty Cycle:");
 648:	80 e6       	ldi	r24, 0x60	; 96
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
		LCD_send_char(duty_cycle/10+48);
 650:	88 2d       	mov	r24, r8
 652:	6a e0       	ldi	r22, 0x0A	; 10
 654:	0e 94 31 06 	call	0xc62	; 0xc62 <__udivmodqi4>
 658:	c9 2e       	mov	r12, r25
 65a:	80 5d       	subi	r24, 0xD0	; 208
 65c:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
		LCD_send_char(duty_cycle%10+48);
 660:	8c 2d       	mov	r24, r12
 662:	80 5d       	subi	r24, 0xD0	; 208
 664:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
		LCD_send_char('%');
 668:	85 e2       	ldi	r24, 0x25	; 37
 66a:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
		LCD_move_cursor(2,1);
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	0e 94 91 04 	call	0x922	; 0x922 <LCD_move_cursor>
		LCD_send_string("Freq:");
 676:	8c e6       	ldi	r24, 0x6C	; 108
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
		if(frequency >= 10000)
 67e:	87 e2       	ldi	r24, 0x27	; 39
 680:	c0 31       	cpi	r28, 0x10	; 16
 682:	d8 07       	cpc	r29, r24
 684:	d8 f1       	brcs	.+118    	; 0x6fc <main+0x164>
		{
			LCD_send_char(frequency/10000+48);
 686:	ce 01       	movw	r24, r28
 688:	60 e1       	ldi	r22, 0x10	; 16
 68a:	77 e2       	ldi	r23, 0x27	; 39
 68c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 690:	86 2f       	mov	r24, r22
 692:	80 5d       	subi	r24, 0xD0	; 208
 694:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/1000)%10+48);
 698:	ce 01       	movw	r24, r28
 69a:	68 ee       	ldi	r22, 0xE8	; 232
 69c:	73 e0       	ldi	r23, 0x03	; 3
 69e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6a2:	cb 01       	movw	r24, r22
 6a4:	0f 2e       	mov	r0, r31
 6a6:	fa e0       	ldi	r31, 0x0A	; 10
 6a8:	cf 2e       	mov	r12, r31
 6aa:	dd 24       	eor	r13, r13
 6ac:	f0 2d       	mov	r31, r0
 6ae:	b6 01       	movw	r22, r12
 6b0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6b4:	80 5d       	subi	r24, 0xD0	; 208
 6b6:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/100)%10+48);
 6ba:	ce 01       	movw	r24, r28
 6bc:	64 e6       	ldi	r22, 0x64	; 100
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6c4:	cb 01       	movw	r24, r22
 6c6:	b6 01       	movw	r22, r12
 6c8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6cc:	80 5d       	subi	r24, 0xD0	; 208
 6ce:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/10)%10+48);
 6d2:	ce 01       	movw	r24, r28
 6d4:	b6 01       	movw	r22, r12
 6d6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6da:	c8 2f       	mov	r28, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	b6 01       	movw	r22, r12
 6e0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char(frequency%10+48);
 6ea:	8c 2f       	mov	r24, r28
 6ec:	80 5d       	subi	r24, 0xD0	; 208
 6ee:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_string("Hz");
 6f2:	82 e7       	ldi	r24, 0x72	; 114
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
 6fa:	5f c0       	rjmp	.+190    	; 0x7ba <main+0x222>
		}
		else if(frequency >= 1000)
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	c8 3e       	cpi	r28, 0xE8	; 232
 700:	d8 07       	cpc	r29, r24
 702:	78 f1       	brcs	.+94     	; 0x762 <main+0x1ca>
		{
			LCD_send_char(frequency/1000+48);
 704:	ce 01       	movw	r24, r28
 706:	68 ee       	ldi	r22, 0xE8	; 232
 708:	73 e0       	ldi	r23, 0x03	; 3
 70a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 70e:	86 2f       	mov	r24, r22
 710:	80 5d       	subi	r24, 0xD0	; 208
 712:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/100)%10+48);
 716:	ce 01       	movw	r24, r28
 718:	64 e6       	ldi	r22, 0x64	; 100
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 720:	cb 01       	movw	r24, r22
 722:	0f 2e       	mov	r0, r31
 724:	fa e0       	ldi	r31, 0x0A	; 10
 726:	cf 2e       	mov	r12, r31
 728:	dd 24       	eor	r13, r13
 72a:	f0 2d       	mov	r31, r0
 72c:	b6 01       	movw	r22, r12
 72e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 732:	80 5d       	subi	r24, 0xD0	; 208
 734:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/10)%10+48);
 738:	ce 01       	movw	r24, r28
 73a:	b6 01       	movw	r22, r12
 73c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 740:	c8 2f       	mov	r28, r24
 742:	cb 01       	movw	r24, r22
 744:	b6 01       	movw	r22, r12
 746:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 74a:	80 5d       	subi	r24, 0xD0	; 208
 74c:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char(frequency%10+48);
 750:	8c 2f       	mov	r24, r28
 752:	80 5d       	subi	r24, 0xD0	; 208
 754:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_string("Hz");
 758:	82 e7       	ldi	r24, 0x72	; 114
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
 760:	2c c0       	rjmp	.+88     	; 0x7ba <main+0x222>
		}
		else
		{
			LCD_send_char(frequency/100+48);
 762:	ce 01       	movw	r24, r28
 764:	64 e6       	ldi	r22, 0x64	; 100
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 76c:	86 2f       	mov	r24, r22
 76e:	80 5d       	subi	r24, 0xD0	; 208
 770:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char((frequency/10)%10+48);
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	ce 01       	movw	r24, r28
 77a:	b9 01       	movw	r22, r18
 77c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 780:	c8 2f       	mov	r28, r24
 782:	cb 01       	movw	r24, r22
 784:	b9 01       	movw	r22, r18
 786:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodhi4>
 78a:	80 5d       	subi	r24, 0xD0	; 208
 78c:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_char(frequency%10+48);
 790:	8c 2f       	mov	r24, r28
 792:	80 5d       	subi	r24, 0xD0	; 208
 794:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
			LCD_send_string("Hz");
 798:	82 e7       	ldi	r24, 0x72	; 114
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
 7a0:	0c c0       	rjmp	.+24     	; 0x7ba <main+0x222>
		}
	}
	else
	{
		LCD_send_string("Frequency is");
 7a2:	85 e7       	ldi	r24, 0x75	; 117
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
		LCD_move_cursor(2,1);
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	0e 94 91 04 	call	0x922	; 0x922 <LCD_move_cursor>
		LCD_send_string("out of range");
 7b2:	82 e8       	ldi	r24, 0x82	; 130
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 82 04 	call	0x904	; 0x904 <LCD_send_string>
 7ba:	ff cf       	rjmp	.-2      	; 0x7ba <main+0x222>

000007bc <Enable>:
	LCD_clear_screen();
	LCD_send_cmd(ENTRY_MODE);
}
static void Enable()
{
	DIO_writePIN(LCD_CTRL_PORT,EN,1);
 7bc:	82 e4       	ldi	r24, 0x42	; 66
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7c6:	8f e9       	ldi	r24, 0x9F	; 159
 7c8:	9f e0       	ldi	r25, 0x0F	; 15
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <Enable+0xe>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <Enable+0x14>
 7d0:	00 00       	nop
	_delay_ms(2);
	DIO_writePIN(LCD_CTRL_PORT,EN,0);
 7d2:	82 e4       	ldi	r24, 0x42	; 66
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
 7dc:	8f e9       	ldi	r24, 0x9F	; 159
 7de:	9f e0       	ldi	r25, 0x0F	; 15
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <Enable+0x24>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <Enable+0x2a>
 7e6:	00 00       	nop
	_delay_ms(2);
}
 7e8:	08 95       	ret

000007ea <LCD_send_cmd>:
void LCD_send_cmd(char cmd)
{
 7ea:	cf 93       	push	r28
 7ec:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
	DIO_writePORT(LCD_DATA_PORT,cmd);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
 7ee:	82 e4       	ldi	r24, 0x42	; 66
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd>>4);
 7f8:	6c 2f       	mov	r22, r28
 7fa:	62 95       	swap	r22
 7fc:	6f 70       	andi	r22, 0x0F	; 15
 7fe:	81 e4       	ldi	r24, 0x41	; 65
 800:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
 804:	0e 94 de 03 	call	0x7bc	; 0x7bc <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd);
 808:	81 e4       	ldi	r24, 0x41	; 65
 80a:	6c 2f       	mov	r22, r28
 80c:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
 810:	0e 94 de 03 	call	0x7bc	; 0x7bc <Enable>
 814:	8f ec       	ldi	r24, 0xCF	; 207
 816:	97 e0       	ldi	r25, 0x07	; 7
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	f1 f7       	brne	.-4      	; 0x818 <LCD_send_cmd+0x2e>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <LCD_send_cmd+0x34>
 81e:	00 00       	nop
	#endif
	_delay_ms(1);
}
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <LCD_send_char>:
void LCD_send_char(char data)
{
 824:	cf 93       	push	r28
 826:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
	DIO_writePORT(LCD_DATA_PORT,data);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
 828:	82 e4       	ldi	r24, 0x42	; 66
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,data>>4);
 832:	6c 2f       	mov	r22, r28
 834:	62 95       	swap	r22
 836:	6f 70       	andi	r22, 0x0F	; 15
 838:	81 e4       	ldi	r24, 0x41	; 65
 83a:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
 83e:	0e 94 de 03 	call	0x7bc	; 0x7bc <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,data);
 842:	81 e4       	ldi	r24, 0x41	; 65
 844:	6c 2f       	mov	r22, r28
 846:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
 84a:	0e 94 de 03 	call	0x7bc	; 0x7bc <Enable>
 84e:	8f ec       	ldi	r24, 0xCF	; 207
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <LCD_send_char+0x2e>
 856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_send_char+0x34>
 858:	00 00       	nop
	#endif
	_delay_ms(1);
}
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <LCD_clear_screen>:
void LCD_clear_screen()
{
	LCD_send_cmd(CLR_SCREEN);
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
 864:	8f e4       	ldi	r24, 0x4F	; 79
 866:	96 e4       	ldi	r25, 0x46	; 70
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	_delay_ms(9);
}
 870:	08 95       	ret

00000872 <LCD_return_home>:
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
 878:	8f e4       	ldi	r24, 0x4F	; 79
 87a:	96 e4       	ldi	r25, 0x46	; 70
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <LCD_return_home+0xa>
 880:	00 c0       	rjmp	.+0      	; 0x882 <LCD_return_home+0x10>
 882:	00 00       	nop
	_delay_ms(9);
}
 884:	08 95       	ret

00000886 <LCD_init>:
 886:	8f e7       	ldi	r24, 0x7F	; 127
 888:	99 ea       	ldi	r25, 0xA9	; 169
 88a:	a3 e0       	ldi	r26, 0x03	; 3
 88c:	81 50       	subi	r24, 0x01	; 1
 88e:	90 40       	sbci	r25, 0x00	; 0
 890:	a0 40       	sbci	r26, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <LCD_init+0x6>
 894:	00 c0       	rjmp	.+0      	; 0x896 <LCD_init+0x10>
 896:	00 00       	nop
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
	LCD_send_cmd(0x38);
	#elif defined FOUR_BIT_MODE
	DIO_setPINDir(LCD_DATA_PORT,4,1);
 898:	81 e4       	ldi	r24, 0x41	; 65
 89a:	64 e0       	ldi	r22, 0x04	; 4
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,5,1);
 8a2:	81 e4       	ldi	r24, 0x41	; 65
 8a4:	65 e0       	ldi	r22, 0x05	; 5
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,6,1);
 8ac:	81 e4       	ldi	r24, 0x41	; 65
 8ae:	66 e0       	ldi	r22, 0x06	; 6
 8b0:	41 e0       	ldi	r20, 0x01	; 1
 8b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,7,1);
 8b6:	81 e4       	ldi	r24, 0x41	; 65
 8b8:	67 e0       	ldi	r22, 0x07	; 7
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,EN,1);
 8c0:	82 e4       	ldi	r24, 0x42	; 66
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
 8ca:	82 e4       	ldi	r24, 0x42	; 66
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
 8d4:	82 e4       	ldi	r24, 0x42	; 66
 8d6:	62 e0       	ldi	r22, 0x02	; 2
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
 8de:	82 e4       	ldi	r24, 0x42	; 66
 8e0:	62 e0       	ldi	r22, 0x02	; 2
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	LCD_return_home();
 8e8:	0e 94 39 04 	call	0x872	; 0x872 <LCD_return_home>
	LCD_send_cmd(0x28);
 8ec:	88 e2       	ldi	r24, 0x28	; 40
 8ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
	#endif
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
 8f2:	8e e0       	ldi	r24, 0x0E	; 14
 8f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
	LCD_clear_screen();
 8f8:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_clear_screen>
	LCD_send_cmd(ENTRY_MODE);
 8fc:	86 e0       	ldi	r24, 0x06	; 6
 8fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
}
 902:	08 95       	ret

00000904 <LCD_send_string>:
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	ec 01       	movw	r28, r24
	while( (*ptr) != 0)
 90a:	88 81       	ld	r24, Y
 90c:	88 23       	and	r24, r24
 90e:	31 f0       	breq	.+12     	; 0x91c <LCD_send_string+0x18>
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
 910:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*ptr) != 0)
	{
		LCD_send_char(*ptr);
 912:	0e 94 12 04 	call	0x824	; 0x824 <LCD_send_char>
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
	while( (*ptr) != 0)
 916:	89 91       	ld	r24, Y+
 918:	88 23       	and	r24, r24
 91a:	d9 f7       	brne	.-10     	; 0x912 <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <LCD_move_cursor>:
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
 922:	28 2f       	mov	r18, r24
 924:	21 50       	subi	r18, 0x01	; 1
 926:	22 30       	cpi	r18, 0x02	; 2
 928:	70 f4       	brcc	.+28     	; 0x946 <LCD_move_cursor+0x24>
 92a:	61 31       	cpi	r22, 0x11	; 17
 92c:	70 f4       	brcc	.+28     	; 0x94a <LCD_move_cursor+0x28>
 92e:	66 23       	and	r22, r22
 930:	71 f0       	breq	.+28     	; 0x94e <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row == 1)
 932:	81 30       	cpi	r24, 0x01	; 1
 934:	19 f4       	brne	.+6      	; 0x93c <LCD_move_cursor+0x1a>
	{
		data = 0x80 + column - 1;
 936:	96 2f       	mov	r25, r22
 938:	91 58       	subi	r25, 0x81	; 129
 93a:	0a c0       	rjmp	.+20     	; 0x950 <LCD_move_cursor+0x2e>
	}
	else if(row == 2)
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	41 f4       	brne	.+16     	; 0x950 <LCD_move_cursor+0x2e>
	{
		data = 0xC0 + column - 1;
 940:	96 2f       	mov	r25, r22
 942:	91 54       	subi	r25, 0x41	; 65
 944:	05 c0       	rjmp	.+10     	; 0x950 <LCD_move_cursor+0x2e>
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
	{
		data=0x80;
 946:	90 e8       	ldi	r25, 0x80	; 128
 948:	03 c0       	rjmp	.+6      	; 0x950 <LCD_move_cursor+0x2e>
 94a:	90 e8       	ldi	r25, 0x80	; 128
 94c:	01 c0       	rjmp	.+2      	; 0x950 <LCD_move_cursor+0x2e>
 94e:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row == 2)
	{
		data = 0xC0 + column - 1;
	}
	LCD_send_cmd(data);
 950:	89 2f       	mov	r24, r25
 952:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_send_cmd>
 956:	08 95       	ret

00000958 <__divsf3>:
 958:	0c d0       	rcall	.+24     	; 0x972 <__divsf3x>
 95a:	e6 c0       	rjmp	.+460    	; 0xb28 <__fp_round>
 95c:	de d0       	rcall	.+444    	; 0xb1a <__fp_pscB>
 95e:	40 f0       	brcs	.+16     	; 0x970 <__divsf3+0x18>
 960:	d5 d0       	rcall	.+426    	; 0xb0c <__fp_pscA>
 962:	30 f0       	brcs	.+12     	; 0x970 <__divsf3+0x18>
 964:	21 f4       	brne	.+8      	; 0x96e <__divsf3+0x16>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	19 f0       	breq	.+6      	; 0x970 <__divsf3+0x18>
 96a:	c7 c0       	rjmp	.+398    	; 0xafa <__fp_inf>
 96c:	51 11       	cpse	r21, r1
 96e:	10 c1       	rjmp	.+544    	; 0xb90 <__fp_szero>
 970:	ca c0       	rjmp	.+404    	; 0xb06 <__fp_nan>

00000972 <__divsf3x>:
 972:	eb d0       	rcall	.+470    	; 0xb4a <__fp_split3>
 974:	98 f3       	brcs	.-26     	; 0x95c <__divsf3+0x4>

00000976 <__divsf3_pse>:
 976:	99 23       	and	r25, r25
 978:	c9 f3       	breq	.-14     	; 0x96c <__divsf3+0x14>
 97a:	55 23       	and	r21, r21
 97c:	b1 f3       	breq	.-20     	; 0x96a <__divsf3+0x12>
 97e:	95 1b       	sub	r25, r21
 980:	55 0b       	sbc	r21, r21
 982:	bb 27       	eor	r27, r27
 984:	aa 27       	eor	r26, r26
 986:	62 17       	cp	r22, r18
 988:	73 07       	cpc	r23, r19
 98a:	84 07       	cpc	r24, r20
 98c:	38 f0       	brcs	.+14     	; 0x99c <__divsf3_pse+0x26>
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	22 0f       	add	r18, r18
 994:	33 1f       	adc	r19, r19
 996:	44 1f       	adc	r20, r20
 998:	aa 1f       	adc	r26, r26
 99a:	a9 f3       	breq	.-22     	; 0x986 <__divsf3_pse+0x10>
 99c:	33 d0       	rcall	.+102    	; 0xa04 <__divsf3_pse+0x8e>
 99e:	0e 2e       	mov	r0, r30
 9a0:	3a f0       	brmi	.+14     	; 0x9b0 <__divsf3_pse+0x3a>
 9a2:	e0 e8       	ldi	r30, 0x80	; 128
 9a4:	30 d0       	rcall	.+96     	; 0xa06 <__divsf3_pse+0x90>
 9a6:	91 50       	subi	r25, 0x01	; 1
 9a8:	50 40       	sbci	r21, 0x00	; 0
 9aa:	e6 95       	lsr	r30
 9ac:	00 1c       	adc	r0, r0
 9ae:	ca f7       	brpl	.-14     	; 0x9a2 <__divsf3_pse+0x2c>
 9b0:	29 d0       	rcall	.+82     	; 0xa04 <__divsf3_pse+0x8e>
 9b2:	fe 2f       	mov	r31, r30
 9b4:	27 d0       	rcall	.+78     	; 0xa04 <__divsf3_pse+0x8e>
 9b6:	66 0f       	add	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	bb 1f       	adc	r27, r27
 9be:	26 17       	cp	r18, r22
 9c0:	37 07       	cpc	r19, r23
 9c2:	48 07       	cpc	r20, r24
 9c4:	ab 07       	cpc	r26, r27
 9c6:	b0 e8       	ldi	r27, 0x80	; 128
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__divsf3_pse+0x56>
 9ca:	bb 0b       	sbc	r27, r27
 9cc:	80 2d       	mov	r24, r0
 9ce:	bf 01       	movw	r22, r30
 9d0:	ff 27       	eor	r31, r31
 9d2:	93 58       	subi	r25, 0x83	; 131
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	2a f0       	brmi	.+10     	; 0x9e2 <__divsf3_pse+0x6c>
 9d8:	9e 3f       	cpi	r25, 0xFE	; 254
 9da:	51 05       	cpc	r21, r1
 9dc:	68 f0       	brcs	.+26     	; 0x9f8 <__divsf3_pse+0x82>
 9de:	8d c0       	rjmp	.+282    	; 0xafa <__fp_inf>
 9e0:	d7 c0       	rjmp	.+430    	; 0xb90 <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	ec f3       	brlt	.-6      	; 0x9e0 <__divsf3_pse+0x6a>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	dc f3       	brlt	.-10     	; 0x9e0 <__divsf3_pse+0x6a>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	9f 5f       	subi	r25, 0xFF	; 255
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__divsf3_pse+0x74>
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret
 a04:	e1 e0       	ldi	r30, 0x01	; 1
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	bb 1f       	adc	r27, r27
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	ba 07       	cpc	r27, r26
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__divsf3_pse+0xaa>
 a18:	62 1b       	sub	r22, r18
 a1a:	73 0b       	sbc	r23, r19
 a1c:	84 0b       	sbc	r24, r20
 a1e:	ba 0b       	sbc	r27, r26
 a20:	ee 1f       	adc	r30, r30
 a22:	88 f7       	brcc	.-30     	; 0xa06 <__divsf3_pse+0x90>
 a24:	e0 95       	com	r30
 a26:	08 95       	ret

00000a28 <__fixunssfsi>:
 a28:	98 d0       	rcall	.+304    	; 0xb5a <__fp_splitA>
 a2a:	88 f0       	brcs	.+34     	; 0xa4e <__fixunssfsi+0x26>
 a2c:	9f 57       	subi	r25, 0x7F	; 127
 a2e:	90 f0       	brcs	.+36     	; 0xa54 <__fixunssfsi+0x2c>
 a30:	b9 2f       	mov	r27, r25
 a32:	99 27       	eor	r25, r25
 a34:	b7 51       	subi	r27, 0x17	; 23
 a36:	a0 f0       	brcs	.+40     	; 0xa60 <__fixunssfsi+0x38>
 a38:	d1 f0       	breq	.+52     	; 0xa6e <__fixunssfsi+0x46>
 a3a:	66 0f       	add	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	1a f0       	brmi	.+6      	; 0xa4a <__fixunssfsi+0x22>
 a44:	ba 95       	dec	r27
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__fixunssfsi+0x12>
 a48:	12 c0       	rjmp	.+36     	; 0xa6e <__fixunssfsi+0x46>
 a4a:	b1 30       	cpi	r27, 0x01	; 1
 a4c:	81 f0       	breq	.+32     	; 0xa6e <__fixunssfsi+0x46>
 a4e:	9f d0       	rcall	.+318    	; 0xb8e <__fp_zero>
 a50:	b1 e0       	ldi	r27, 0x01	; 1
 a52:	08 95       	ret
 a54:	9c c0       	rjmp	.+312    	; 0xb8e <__fp_zero>
 a56:	67 2f       	mov	r22, r23
 a58:	78 2f       	mov	r23, r24
 a5a:	88 27       	eor	r24, r24
 a5c:	b8 5f       	subi	r27, 0xF8	; 248
 a5e:	39 f0       	breq	.+14     	; 0xa6e <__fixunssfsi+0x46>
 a60:	b9 3f       	cpi	r27, 0xF9	; 249
 a62:	cc f3       	brlt	.-14     	; 0xa56 <__fixunssfsi+0x2e>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b3 95       	inc	r27
 a6c:	d9 f7       	brne	.-10     	; 0xa64 <__fixunssfsi+0x3c>
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__fixunssfsi+0x56>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__floatunsisf>:
 a80:	e8 94       	clt
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <__floatsisf+0x12>

00000a84 <__floatsisf>:
 a84:	97 fb       	bst	r25, 7
 a86:	3e f4       	brtc	.+14     	; 0xa96 <__floatsisf+0x12>
 a88:	90 95       	com	r25
 a8a:	80 95       	com	r24
 a8c:	70 95       	com	r23
 a8e:	61 95       	neg	r22
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	99 23       	and	r25, r25
 a98:	a9 f0       	breq	.+42     	; 0xac4 <__floatsisf+0x40>
 a9a:	f9 2f       	mov	r31, r25
 a9c:	96 e9       	ldi	r25, 0x96	; 150
 a9e:	bb 27       	eor	r27, r27
 aa0:	93 95       	inc	r25
 aa2:	f6 95       	lsr	r31
 aa4:	87 95       	ror	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	b7 95       	ror	r27
 aac:	f1 11       	cpse	r31, r1
 aae:	f8 cf       	rjmp	.-16     	; 0xaa0 <__floatsisf+0x1c>
 ab0:	fa f4       	brpl	.+62     	; 0xaf0 <__floatsisf+0x6c>
 ab2:	bb 0f       	add	r27, r27
 ab4:	11 f4       	brne	.+4      	; 0xaba <__floatsisf+0x36>
 ab6:	60 ff       	sbrs	r22, 0
 ab8:	1b c0       	rjmp	.+54     	; 0xaf0 <__floatsisf+0x6c>
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <__floatsisf+0x6c>
 ac4:	88 23       	and	r24, r24
 ac6:	11 f0       	breq	.+4      	; 0xacc <__floatsisf+0x48>
 ac8:	96 e9       	ldi	r25, 0x96	; 150
 aca:	11 c0       	rjmp	.+34     	; 0xaee <__floatsisf+0x6a>
 acc:	77 23       	and	r23, r23
 ace:	21 f0       	breq	.+8      	; 0xad8 <__floatsisf+0x54>
 ad0:	9e e8       	ldi	r25, 0x8E	; 142
 ad2:	87 2f       	mov	r24, r23
 ad4:	76 2f       	mov	r23, r22
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__floatsisf+0x5e>
 ad8:	66 23       	and	r22, r22
 ada:	71 f0       	breq	.+28     	; 0xaf8 <__floatsisf+0x74>
 adc:	96 e8       	ldi	r25, 0x86	; 134
 ade:	86 2f       	mov	r24, r22
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	2a f0       	brmi	.+10     	; 0xaf0 <__floatsisf+0x6c>
 ae6:	9a 95       	dec	r25
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	da f7       	brpl	.-10     	; 0xae6 <__floatsisf+0x62>
 af0:	88 0f       	add	r24, r24
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__fp_inf>:
 afa:	97 f9       	bld	r25, 7
 afc:	9f 67       	ori	r25, 0x7F	; 127
 afe:	80 e8       	ldi	r24, 0x80	; 128
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	60 e0       	ldi	r22, 0x00	; 0
 b04:	08 95       	ret

00000b06 <__fp_nan>:
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	80 ec       	ldi	r24, 0xC0	; 192
 b0a:	08 95       	ret

00000b0c <__fp_pscA>:
 b0c:	00 24       	eor	r0, r0
 b0e:	0a 94       	dec	r0
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	09 06       	cpc	r0, r25
 b18:	08 95       	ret

00000b1a <__fp_pscB>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	05 06       	cpc	r0, r21
 b26:	08 95       	ret

00000b28 <__fp_round>:
 b28:	09 2e       	mov	r0, r25
 b2a:	03 94       	inc	r0
 b2c:	00 0c       	add	r0, r0
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0xc>
 b30:	88 23       	and	r24, r24
 b32:	52 f0       	brmi	.+20     	; 0xb48 <__fp_round+0x20>
 b34:	bb 0f       	add	r27, r27
 b36:	40 f4       	brcc	.+16     	; 0xb48 <__fp_round+0x20>
 b38:	bf 2b       	or	r27, r31
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0x18>
 b3c:	60 ff       	sbrs	r22, 0
 b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__fp_round+0x20>
 b40:	6f 5f       	subi	r22, 0xFF	; 255
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__fp_split3>:
 b4a:	57 fd       	sbrc	r21, 7
 b4c:	90 58       	subi	r25, 0x80	; 128
 b4e:	44 0f       	add	r20, r20
 b50:	55 1f       	adc	r21, r21
 b52:	59 f0       	breq	.+22     	; 0xb6a <__fp_splitA+0x10>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	71 f0       	breq	.+28     	; 0xb74 <__fp_splitA+0x1a>
 b58:	47 95       	ror	r20

00000b5a <__fp_splitA>:
 b5a:	88 0f       	add	r24, r24
 b5c:	97 fb       	bst	r25, 7
 b5e:	99 1f       	adc	r25, r25
 b60:	61 f0       	breq	.+24     	; 0xb7a <__fp_splitA+0x20>
 b62:	9f 3f       	cpi	r25, 0xFF	; 255
 b64:	79 f0       	breq	.+30     	; 0xb84 <__fp_splitA+0x2a>
 b66:	87 95       	ror	r24
 b68:	08 95       	ret
 b6a:	12 16       	cp	r1, r18
 b6c:	13 06       	cpc	r1, r19
 b6e:	14 06       	cpc	r1, r20
 b70:	55 1f       	adc	r21, r21
 b72:	f2 cf       	rjmp	.-28     	; 0xb58 <__fp_split3+0xe>
 b74:	46 95       	lsr	r20
 b76:	f1 df       	rcall	.-30     	; 0xb5a <__fp_splitA>
 b78:	08 c0       	rjmp	.+16     	; 0xb8a <__fp_splitA+0x30>
 b7a:	16 16       	cp	r1, r22
 b7c:	17 06       	cpc	r1, r23
 b7e:	18 06       	cpc	r1, r24
 b80:	99 1f       	adc	r25, r25
 b82:	f1 cf       	rjmp	.-30     	; 0xb66 <__fp_splitA+0xc>
 b84:	86 95       	lsr	r24
 b86:	71 05       	cpc	r23, r1
 b88:	61 05       	cpc	r22, r1
 b8a:	08 94       	sec
 b8c:	08 95       	ret

00000b8e <__fp_zero>:
 b8e:	e8 94       	clt

00000b90 <__fp_szero>:
 b90:	bb 27       	eor	r27, r27
 b92:	66 27       	eor	r22, r22
 b94:	77 27       	eor	r23, r23
 b96:	cb 01       	movw	r24, r22
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__mulsf3>:
 b9c:	0b d0       	rcall	.+22     	; 0xbb4 <__mulsf3x>
 b9e:	c4 cf       	rjmp	.-120    	; 0xb28 <__fp_round>
 ba0:	b5 df       	rcall	.-150    	; 0xb0c <__fp_pscA>
 ba2:	28 f0       	brcs	.+10     	; 0xbae <__mulsf3+0x12>
 ba4:	ba df       	rcall	.-140    	; 0xb1a <__fp_pscB>
 ba6:	18 f0       	brcs	.+6      	; 0xbae <__mulsf3+0x12>
 ba8:	95 23       	and	r25, r21
 baa:	09 f0       	breq	.+2      	; 0xbae <__mulsf3+0x12>
 bac:	a6 cf       	rjmp	.-180    	; 0xafa <__fp_inf>
 bae:	ab cf       	rjmp	.-170    	; 0xb06 <__fp_nan>
 bb0:	11 24       	eor	r1, r1
 bb2:	ee cf       	rjmp	.-36     	; 0xb90 <__fp_szero>

00000bb4 <__mulsf3x>:
 bb4:	ca df       	rcall	.-108    	; 0xb4a <__fp_split3>
 bb6:	a0 f3       	brcs	.-24     	; 0xba0 <__mulsf3+0x4>

00000bb8 <__mulsf3_pse>:
 bb8:	95 9f       	mul	r25, r21
 bba:	d1 f3       	breq	.-12     	; 0xbb0 <__mulsf3+0x14>
 bbc:	95 0f       	add	r25, r21
 bbe:	50 e0       	ldi	r21, 0x00	; 0
 bc0:	55 1f       	adc	r21, r21
 bc2:	62 9f       	mul	r22, r18
 bc4:	f0 01       	movw	r30, r0
 bc6:	72 9f       	mul	r23, r18
 bc8:	bb 27       	eor	r27, r27
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	63 9f       	mul	r22, r19
 bd0:	aa 27       	eor	r26, r26
 bd2:	f0 0d       	add	r31, r0
 bd4:	b1 1d       	adc	r27, r1
 bd6:	aa 1f       	adc	r26, r26
 bd8:	64 9f       	mul	r22, r20
 bda:	66 27       	eor	r22, r22
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	66 1f       	adc	r22, r22
 be2:	82 9f       	mul	r24, r18
 be4:	22 27       	eor	r18, r18
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	73 9f       	mul	r23, r19
 bee:	b0 0d       	add	r27, r0
 bf0:	a1 1d       	adc	r26, r1
 bf2:	62 1f       	adc	r22, r18
 bf4:	83 9f       	mul	r24, r19
 bf6:	a0 0d       	add	r26, r0
 bf8:	61 1d       	adc	r22, r1
 bfa:	22 1f       	adc	r18, r18
 bfc:	74 9f       	mul	r23, r20
 bfe:	33 27       	eor	r19, r19
 c00:	a0 0d       	add	r26, r0
 c02:	61 1d       	adc	r22, r1
 c04:	23 1f       	adc	r18, r19
 c06:	84 9f       	mul	r24, r20
 c08:	60 0d       	add	r22, r0
 c0a:	21 1d       	adc	r18, r1
 c0c:	82 2f       	mov	r24, r18
 c0e:	76 2f       	mov	r23, r22
 c10:	6a 2f       	mov	r22, r26
 c12:	11 24       	eor	r1, r1
 c14:	9f 57       	subi	r25, 0x7F	; 127
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	8a f0       	brmi	.+34     	; 0xc3c <__mulsf3_pse+0x84>
 c1a:	e1 f0       	breq	.+56     	; 0xc54 <__mulsf3_pse+0x9c>
 c1c:	88 23       	and	r24, r24
 c1e:	4a f0       	brmi	.+18     	; 0xc32 <__mulsf3_pse+0x7a>
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	bb 1f       	adc	r27, r27
 c26:	66 1f       	adc	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	50 40       	sbci	r21, 0x00	; 0
 c30:	a9 f7       	brne	.-22     	; 0xc1c <__mulsf3_pse+0x64>
 c32:	9e 3f       	cpi	r25, 0xFE	; 254
 c34:	51 05       	cpc	r21, r1
 c36:	70 f0       	brcs	.+28     	; 0xc54 <__mulsf3_pse+0x9c>
 c38:	60 cf       	rjmp	.-320    	; 0xafa <__fp_inf>
 c3a:	aa cf       	rjmp	.-172    	; 0xb90 <__fp_szero>
 c3c:	5f 3f       	cpi	r21, 0xFF	; 255
 c3e:	ec f3       	brlt	.-6      	; 0xc3a <__mulsf3_pse+0x82>
 c40:	98 3e       	cpi	r25, 0xE8	; 232
 c42:	dc f3       	brlt	.-10     	; 0xc3a <__mulsf3_pse+0x82>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b7 95       	ror	r27
 c4c:	f7 95       	ror	r31
 c4e:	e7 95       	ror	r30
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x8c>
 c54:	fe 2b       	or	r31, r30
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__udivmodqi4>:
 c62:	99 1b       	sub	r25, r25
 c64:	79 e0       	ldi	r23, 0x09	; 9
 c66:	04 c0       	rjmp	.+8      	; 0xc70 <__udivmodqi4_ep>

00000c68 <__udivmodqi4_loop>:
 c68:	99 1f       	adc	r25, r25
 c6a:	96 17       	cp	r25, r22
 c6c:	08 f0       	brcs	.+2      	; 0xc70 <__udivmodqi4_ep>
 c6e:	96 1b       	sub	r25, r22

00000c70 <__udivmodqi4_ep>:
 c70:	88 1f       	adc	r24, r24
 c72:	7a 95       	dec	r23
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__udivmodqi4_loop>
 c76:	80 95       	com	r24
 c78:	08 95       	ret

00000c7a <__udivmodhi4>:
 c7a:	aa 1b       	sub	r26, r26
 c7c:	bb 1b       	sub	r27, r27
 c7e:	51 e1       	ldi	r21, 0x11	; 17
 c80:	07 c0       	rjmp	.+14     	; 0xc90 <__udivmodhi4_ep>

00000c82 <__udivmodhi4_loop>:
 c82:	aa 1f       	adc	r26, r26
 c84:	bb 1f       	adc	r27, r27
 c86:	a6 17       	cp	r26, r22
 c88:	b7 07       	cpc	r27, r23
 c8a:	10 f0       	brcs	.+4      	; 0xc90 <__udivmodhi4_ep>
 c8c:	a6 1b       	sub	r26, r22
 c8e:	b7 0b       	sbc	r27, r23

00000c90 <__udivmodhi4_ep>:
 c90:	88 1f       	adc	r24, r24
 c92:	99 1f       	adc	r25, r25
 c94:	5a 95       	dec	r21
 c96:	a9 f7       	brne	.-22     	; 0xc82 <__udivmodhi4_loop>
 c98:	80 95       	com	r24
 c9a:	90 95       	com	r25
 c9c:	bc 01       	movw	r22, r24
 c9e:	cd 01       	movw	r24, r26
 ca0:	08 95       	ret

00000ca2 <__udivmodsi4>:
 ca2:	a1 e2       	ldi	r26, 0x21	; 33
 ca4:	1a 2e       	mov	r1, r26
 ca6:	aa 1b       	sub	r26, r26
 ca8:	bb 1b       	sub	r27, r27
 caa:	fd 01       	movw	r30, r26
 cac:	0d c0       	rjmp	.+26     	; 0xcc8 <__udivmodsi4_ep>

00000cae <__udivmodsi4_loop>:
 cae:	aa 1f       	adc	r26, r26
 cb0:	bb 1f       	adc	r27, r27
 cb2:	ee 1f       	adc	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	a2 17       	cp	r26, r18
 cb8:	b3 07       	cpc	r27, r19
 cba:	e4 07       	cpc	r30, r20
 cbc:	f5 07       	cpc	r31, r21
 cbe:	20 f0       	brcs	.+8      	; 0xcc8 <__udivmodsi4_ep>
 cc0:	a2 1b       	sub	r26, r18
 cc2:	b3 0b       	sbc	r27, r19
 cc4:	e4 0b       	sbc	r30, r20
 cc6:	f5 0b       	sbc	r31, r21

00000cc8 <__udivmodsi4_ep>:
 cc8:	66 1f       	adc	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	99 1f       	adc	r25, r25
 cd0:	1a 94       	dec	r1
 cd2:	69 f7       	brne	.-38     	; 0xcae <__udivmodsi4_loop>
 cd4:	60 95       	com	r22
 cd6:	70 95       	com	r23
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	9b 01       	movw	r18, r22
 cde:	ac 01       	movw	r20, r24
 ce0:	bd 01       	movw	r22, r26
 ce2:	cf 01       	movw	r24, r30
 ce4:	08 95       	ret

00000ce6 <_exit>:
 ce6:	f8 94       	cli

00000ce8 <__stop_program>:
 ce8:	ff cf       	rjmp	.-2      	; 0xce8 <__stop_program>
